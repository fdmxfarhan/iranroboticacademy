{
  "_from": "ssh-keygen",
  "_id": "ssh-keygen@0.4.2",
  "_inBundle": false,
  "_integrity": "sha512-SlEWW3cCtz87jwtCTfxo+tR+SQd4jJXWaBI/D9JVd74b2/N9ZvrWcd9lMFwFv0iMYb4aVAeMderH4AK5ZyW+Nw==",
  "_location": "/ssh-keygen",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ssh-keygen",
    "fetchSpec": "latest",
    "name": "ssh-keygen",
    "raw": "ssh-keygen",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ssh-keygen/-/ssh-keygen-0.4.2.tgz",
  "_shasum": "7c09a1716eacb6b92d3768ff6145cea5501c6c45",
  "_spec": "ssh-keygen",
  "_where": "/home/fdmx/Desktop/Web_Applications/test-01",
  "author": {
    "name": "Eric Vicenti",
    "url": "http://github.com/ericvicenti"
  },
  "bugs": {
    "url": "http://github.com/ericvicenti/ssh-keygen/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "underscore": "1.4.x"
  },
  "deprecated": false,
  "description": "Generates SSH key-pairs",
  "devDependencies": {},
  "engines": {
    "node": ">= 0.6.0"
  },
  "homepage": "http://github.com/ericvicenti/ssh-keygen",
  "keywords": [
    "key",
    "pair",
    "private",
    "public",
    "ssh"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ericvicenti/ssh-keygen/blob/master/LICENSE.md"
    }
  ],
  "main": "src/ssh-keygen",
  "name": "ssh-keygen",
  "optionalDependencies": {},
  "readme": "ssh-keygen\n==========\n\nGenerates a SSH key-pair\n\n### Install\n1. Make sure you have ssh-keygen (try `$ ssh-keygen` if you aren't sure)\n2. npm package install\n\n```\nnpm install ssh-keygen\n```\nOR download from github and place in ./node_modules\n\n### Usage\n\n\n\n```js\nvar keygen = require('ssh-keygen');\nvar fs = require('fs');\n\nvar location = __dirname + '/foo_rsa';\nvar comment = 'joe@foobar.com';\nvar password = 'keypassword'; // false and undefined will convert to an empty pw\n\nkeygen({\n  location: location,\n  comment: comment,\n\tpassword: password,\n  read: true\n}, function(err, out){\n\tif(err) return console.log('Something went wrong: '+err);\n\tconsole.log('Keys created!');\n\tconsole.log('private key: '+out.key);\n\tconsole.log('public key: '+out.pubKey);\n});\n\n```\n\nThe following shell command will get executed:\n\n```\n$ ssh-keygen -t rsa -b 2048 -C \"joe@foobar.com\" -N \"keypassword\" -f ./foo_rsa\nGenerating public/private rsa key pair.\nYour identification has been saved in ./foo_rsa.\nYour public key has been saved in ./foo_rsa.pub.\nThe key fingerprint is:\n02:f7:40:b6:c7:b3:a3:68:16:53:dd:86:63:df:b5:33 joe@foobar.com\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|      o          |\n|     o + o       |\n|    . = O o   .  |\n|     + = * . . . |\n|    o . S . . E  |\n|     + o .     o |\n|    + .          |\n|   o             |\n|                 |\n+-----------------+\n```\n\n### Parameters\n\n* location, desired location for the key. The public key will be at the location + `.pub`, defaults temp dir\n* read, should the callback have the key files read into it, defaults true\n* force, destroy pre-existing files with the location name and the public key name, defaults true\n* destroy, destroy the key files once they have been read, defaults false\n* comment, the comment that should be embedded into the key, defaults empty\n* password, the password for the key, defaults empty\n\n### Note\n\nIt is advisable to generate your keys on a machine with a significant random source like one with a mouse/trackpad.\n\n### License\n\nssh-keygen is [open source](https://github.com/ericvicenti/ssh-keygen/blob/master/LICENSE.md) under the MIT license\n\n### Windows\n\nThis package bundles binaries for windows. The current version is: `2.4.4.2-rc3`\n\n### Todo\n\n* Real tests\n\nContributors welcome!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ericvicenti/ssh-keygen.git"
  },
  "version": "0.4.2"
}
